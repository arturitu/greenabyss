var THREE = require('three');
var defaults = require('lodash.defaults');

var __defaultParams = {

};

var colorCache = {};
function SkySampler(params) {
	params = defaults(params, __defaultParams);
	if(!params.renderer) throw new Error("Please provide a renderer");
	if(!params.sunPosition) throw new Error("Please provide a sunPosition");

	var scene = new THREE.Scene();
	var camera = new THREE.PerspectiveCamera(0.5, 1, 0.1, 1000);
	scene.add(camera);
	var renderTarget = new THREE.WebGLRenderTarget(4, 4, {
		minFilter: THREE.LinearFilter, 
		magFilter: THREE.NearestFilter, 
		format: THREE.RGBFormat
	} );

	var sky = new THREE.Sky(100);
	sky.uniforms.sunPosition.value = params.sunPosition;
	scene.add(sky.mesh);

	this.samplers = [];
	this.renderer = params.renderer;
	this.renderTarget = renderTarget;
	this.scene = scene;
	this.sky = sky;
	this.sunPosition = params.sunPosition;
	this.camera = camera;
}

var __precisionScale = 0.1;
var __precisionFixed = 1;
function update() {
	var hashA = (this.sunPosition.x*__precisionScale).toFixed(__precisionFixed) + (this.sunPosition.y*__precisionScale).toFixed(__precisionFixed) + (this.sunPosition.z*__precisionScale).toFixed(__precisionFixed);
	for (var i = this.samplers.length - 1; i >= 0; i--) {
		var pos2 = this.samplers[i].position;
		var hashB = (pos2.x*__precisionScale).toFixed(__precisionFixed) + (pos2.y*__precisionScale).toFixed(__precisionFixed) + (pos2.z*__precisionScale).toFixed(__precisionFixed);
		var key = hashA + hashB;
		var __pixels = colorCache[key];
		if(!__pixels) {
			__pixels = new Uint8Array(4);
			this.camera.lookAt(this.samplers[i].position);
			this.renderer.render(this.scene, this.camera, this.renderTarget, true);
			this.renderer.readRenderTargetPixels( this.renderTarget, 2, 2, 1, 1, __pixels);
			colorCache[key] = __pixels;
		}
		this.samplers[i].targetColor.fromArray(__pixels);
		this.samplers[i].targetColor.multiplyScalar(1/256);
	}
}

function createSample(position, targetColor) {
	this.samplers.push(new Sample(position, targetColor));
}

SkySampler.prototype = {
	update: update,
	createSample: createSample
}

module.exports = SkySampler;




function Sample(position, targetColor) {
	this.position = position;
	this.targetColor = targetColor;
} 
