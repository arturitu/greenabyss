var THREE = require('three');
var WebVRManager = require('webvr-boilerplate');
var WebVRPolyfill = require('webvr-polyfill');
var RayInput = require('ray-input');

var WIDTH = 2;
var HEIGHT = 2;
var DEFAULT_COLOR = new THREE.Color(0x00FF00);
var HIGHLIGHT_COLOR = new THREE.Color(0x1E90FF);
var ACTIVE_COLOR = new THREE.Color(0xFF3333);

function setupRayInput(params) {
    var scene = new THREE.Scene();

    var aspect = window.innerWidth / window.innerHeight;
    var camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 110);
    scene.add(camera);

    var renderer = new THREE.WebGLRenderer();
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);

	var effect = new THREE.VREffect(renderer);
	var controls = new THREE.VRControls(camera);
	controls.standing = true;

    var manager = new WebVRManager(renderer, effect);
    document.body.appendChild(renderer.domElement);

	// Input manager.
	var rayInput = new RayInput.default(camera)
	rayInput.setSize(renderer.getSize());
	rayInput.on('raydown', function(opt_mesh) { handleRayDown_(opt_mesh) });
	rayInput.on('rayup', function(opt_mesh) { handleRayUp_(opt_mesh) });
	rayInput.on('raycancel', function(opt_mesh) { handleRayCancel_(opt_mesh) });
	rayInput.on('rayover', function(mesh) { setSelected_(mesh, true) });
	rayInput.on('rayout', function(mesh) { setSelected_(mesh, false) });

	// Add the ray input mesh to the scene.
	scene.add(rayInput.getMesh());

	// Add a small fake menu to interact with.
	var menu = createMenu_();
	scene.add(menu);

	// Add a floor.
	var floor = createFloor_();
	scene.add(floor);

	menu.children.forEach(function(menuItem) {
		//console.log('menuItem', menuItem);
		rayInput.add(menuItem);
	});

	return {
		manager: manager,
		camera: camera,
		scene: scene,
		controls: controls,
		rayInput: rayInput,
		effect: effect,
		renderer: renderer,
		resize: resize,
		render: render
	};

	function render() {
		controls.update();
		rayInput.update();
		effect.render(scene, camera);
	}

	function resize() {
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
		renderer.setSize(window.innerWidth, window.innerHeight);
		rayInput.setSize(renderer.getSize());
	}

	function handleRayDown_(opt_mesh) {
		setAction_(opt_mesh, true);
	}

	function handleRayUp_(opt_mesh) {
		setAction_(opt_mesh, false);
	}

	function handleRayCancel_(opt_mesh) {
		setAction_(opt_mesh, false);
	}

	function setSelected_(mesh, isSelected) {
		//console.log('setSelected_', isSelected);
		var newColor = isSelected ? HIGHLIGHT_COLOR : DEFAULT_COLOR;
		mesh.material.color = newColor;
	}

	function setAction_(opt_mesh, isActive) {
		//console.log('setAction_', !!opt_mesh, isActive);
		if (opt_mesh) {
			var newColor = isActive ? ACTIVE_COLOR : HIGHLIGHT_COLOR;
			opt_mesh.material.color = newColor;
		}
	}

	function createMenu_() {
		var menu = new THREE.Object3D();

		// Create a 2x2 grid of menu items (green rectangles).
		for (var i = 0; i < WIDTH; i++) {
			for (var j = 0; j < HEIGHT; j++) {
				var item = createMenuItem_();
				item.position.set(i, j, 0);
				item.scale.set(0.9, 0.9, 0.1);
				menu.add(item);
			}
		}

		menu.position.set(-WIDTH/4, HEIGHT/2, -3);
		return menu;
	}

	function createMenuItem_() {
		var geometry = new THREE.BoxGeometry(1, 1, 1);
		var material = new THREE.MeshBasicMaterial({color: DEFAULT_COLOR});
		var cube = new THREE.Mesh(geometry, material);

		return cube;
	}

	function createFloor_() {
		var boxSize = 10;
		var segs = 10;
		var out = new THREE.Object3D();

		var geometry = new THREE.BoxGeometry(boxSize, boxSize, boxSize, segs, segs, segs);
		var material = new THREE.MeshBasicMaterial({
			color: 0x015500,
			wireframe:true,
			side: THREE.BackSide
		});

		// Align the skybox to the floor (which is at y=0).
		let skybox = new THREE.Mesh(geometry, material);
		skybox.position.y = boxSize/2;

		// out.add(skybox);
		return out;
	}
}

module.exports = setupRayInput;