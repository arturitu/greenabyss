const defaults = require('lodash.defaults');
const THREE = require('three');
const colorVertices = require('geometry/utils/colorVertices');
const getColliderMaterial = require('materials/getColliderMaterial');
const tweener = require('tweeners/game-raf');
const getIconGeometry = require('geometry/icons');
const easeOut = require('eases').expoOut;
var __defaultParams = {
	icon: 'close',
	radius: 0.3,
	iconSizeRatio: 0.3,
	iconThicknessRatio: 0.1,
	hitAreaRadiusRatio: 1.33,
	onOverScale: 1.15,
	normalScale: 1,
	sides: 48,
	colorBG: 0x000000,
	colorIcon: 0xffffff
}

var __geometries = [];
function __getGeometry(params) {
	var hash = JSON.stringify(params);
	if(!__geometries[hash]) {
		var geom = new THREE.CircleGeometry(params.radius, params.sides);
		colorVertices(geom, params.colorBG);
		var iconSize = params.radius * 2 * params.iconSizeRatio;
		var iconGeometry = getIconGeometry({
			name: params.icon,
			size: iconSize,
			thickness: iconSize * params.iconThicknessRatio,
			color: params.colorIcon
		});
		var iconTranslateMatrix = (new THREE.Matrix4()).makeTranslation(0, 0, params.radius * 0.01);
		geom.merge(iconGeometry, iconTranslateMatrix);

		__geometries[hash] = geom;
	}
	return __geometries[hash];
}

var __material;
function __getMaterial() {
	var __material = new THREE.MeshBasicMaterial({
		color: 0xffffff,
		vertexColors: THREE.VertexColors,
		onOverRotate: Math.PI 
		// wireframe: true
	});
	return __material;
}

function CloseButton(params) {
	params = defaults(params, __defaultParams);
	if(!(params.colorBG instanceof THREE.Color)) {
		params.colorBG = new THREE.Color(params.colorBG);
	}
	if(!(params.colorIcon instanceof THREE.Color)) {
		params.colorIcon = new THREE.Color(params.colorIcon);
	}
	THREE.Object3D.call(this);
	var icon = new THREE.Mesh(
		__getGeometry({
			icon: params.icon,
			radius: params.radius,
			iconSizeRatio: params.iconSizeRatio,
			iconThicknessRatio: params.iconThicknessRatio,
			colorBG: params.colorBG,
			colorIcon: params.colorIcon,
			sides: params.sides
		}),
		__getMaterial()
	);
	this.add(icon);
	var s = params.radius * params.hitAreaRadiusRatio * 2;
	var collider = new THREE.Mesh(new THREE.PlaneGeometry(s, s, 1, 1), getColliderMaterial());
	this.add(collider);
	collider.collisionOwner = this;
	this.onOverRotate = params.onOverRotate;
	this.onOverScale = params.onOverScale;
	this.normalScale = params.normalScale;
	this.collider = collider;
	this.icon = icon;
}

CloseButton.prototype = Object.create(THREE.Object3D.prototype);

CloseButton.prototype.onSelect = function() {
	console.warn('Replace this method');
}

function _overAndOut(scale, angle) {
	tweener.killTweensOf(this.icon.scale);
	tweener.to(this.icon.scale, 0.5, {
		x: scale,
		y: scale,
		ease: easeOut,
	});
	tweener.killTweensOf(this.icon.rotation);
	tweener.to(this.icon.rotation, 0.5, {
		z: angle,
		ease: easeOut,
	});
}

CloseButton.prototype.onOver = function() {
	_overAndOut.call(this, this.onOverScale, this.onOverRotate);
}

CloseButton.prototype.onOut = function() {
	_overAndOut.call(this, this.normalScale, 0);
}

CloseButton.prototype.getColliders = function() {
	return this.collider;
}

module.exports = CloseButton