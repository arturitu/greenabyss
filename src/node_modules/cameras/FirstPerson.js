const settings = require('settings');
const Blindfold = require('gameObjects/Blindfold');
const defaults = require('lodash.defaults');
const createOrbitControls = require('orbit-controls');

var __defaultParams = {
  fov: 60,
  near: 0.001,
  far: 100,
  teleportDuration: 0.5
};

const __targetVec3 = new THREE.Vector3();
var __phiBounds = {
  tight: [Math.PI * 0.2, Math.PI * 0.3],
  loose: [Math.PI * 0.25, Math.PI * 0.75]
}

function FirstPersonCamera (params) {
  params = defaults(params || {}, __defaultParams);
  THREE.PerspectiveCamera.call(this, params.fov, 1, params.near, params.far);
  const blindfold = new Blindfold({
    radius: 0.2,
    color: 0x000000
  });
  this.add(blindfold);
  blindfold.animateOut();
  this.position.set(0, 2, 0);
  var vrControls = new THREE.VRControls(this);
  vrControls.standing = true;
  this.vrControls = vrControls;
  this.blindfold = blindfold;
}

FirstPersonCamera.prototype = Object.create(THREE.PerspectiveCamera.prototype);

var __proto = FirstPersonCamera.prototype;
__proto.onEnterFrame = onEnterFrame;
__proto.onResize = onResize;
__proto.onVRChangeCameraControls = onVRChangeCameraControls;

function onEnterFrame (dt) {
  this.cameraControls.update();
}

function onResize (width, height) {
  const aspect = width / height;
  this.aspect = aspect;
  this.updateProjectionMatrix();
}

function onVRChangeCameraControls(vr) {
  if(this.cameraControls && this.cameraControls.disable) {
    this.cameraControls.disable();
  }
  if (vr) {
    // Apply VR headset positional data to camera.
    this.cameraControls = _getVRControls.call(this);
  } else {
    // 3D orbit controller with damping
    this.cameraControls = _getOrbitControls.call(this);
  }
  if(this.cameraControls && this.cameraControls.enable) {
    this.cameraControls.enable();
  }
}

function _getVRControls() {
  if(!this.vrControls) {
    this.vrControls = new THREE.VRControls(this.camera);
    this.vrControls.standing = true;
  }
  return this.vrControls;
}

function _getOrbitControls() {
  if(!this.orbitControls) {
    this.orbitControls = createOrbitControls({
      distance: 0,
      zoom: false,
      pinch: false,
      rotateSpeed: -0.1,
      phiBounds: __phiBounds.loose,
    });
  }
  return this.orbitControls;
}


module.exports = FirstPersonCamera;