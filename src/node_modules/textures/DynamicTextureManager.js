var THREE = require('three');
var defaults = require('lodash.defaults');
var TestSphere = require('meshes/TestSphere');

var __defaultParams = {

};

function DynamicTextureManager(params) {
	params = defaults(params, __defaultParams);
	if(!params.renderer) throw new Error('You must provide a threejs webGL renderer.');
	var renderer = params.renderer;

	var scene = new THREE.Scene();
	var camera = new THREE.OrthographicCamera(0, 1, 1, 0, -1, 1);
	scene.add(camera);

	var maps = {};
	var recipes = {
		water: {
			itemScale: 0.3,
			passes: {
				map: {
					type:'Basic',
					color: 0x3fafef,
					colorBG: 0x1f4fef
				},
				// lightMap: {
				// 	intensity: 1.0
				// },
				// aoMap: {
				// 	intensity: 1.0
				// },
				emissiveMap: {
					type:'Basic',
					color: 0x000000,
					colorBG: 0x000000
				},
				// bumpMap: {},
				normalMap: {
					type: 'Normal',
					colorBG: 0x7f7fff,
					// opacity: 0.5
				},
				// displacementMap: {},
				roughnessMap: {
					type: 'Basic',
					color: 0x1f1f1f,
					colorBG: 0x1f1f1f
				},
				metalnessMap: {
					type: 'Basic',
					color: 0xffffff,
					colorBG: 0xffffff
				},
				alphaMap: {
					type: 'Basic',
					color: 0xffffff,
					colorBG: 0x000000
				},
				// envMap: {
				// 	intensity: 1.0
				// },
			}
		},
		grass: {
			itemScale: 0.1,
			passes: {
				map: {
					type:'Basic',
					color: 0x1f8f0f,
					colorBG: 0x2f8f0f
				},
				// lightMap: {
				// 	intensity: 1.0
				// },
				// aoMap: {
				// 	intensity: 1.0
				// },
				emissiveMap: {
					type:'Basic',
					color: 0x003f00,
					colorBG: 0x000000
				},
				// bumpMap: {},
				normalMap: {
					type: 'Normal',
					colorBG: 0x7f7fff,
					// opacity: 0.5
				},
				// displacementMap: {},
				roughnessMap: {
					type: 'Basic',
					color: 0xafafaf,
					colorBG: 0xdfdfdf
				},
				metalnessMap: {
					type: 'Basic',
					color: 0x4f4f4f,
					colorBG: 0x000000
				},
				alphaMap: {
					type: 'Basic',
					color: 0xffffff,
					colorBG: 0x000000
				},
				// envMap: {
				// 	intensity: 1.0
				// },
			}
		},
		dirt: {
			itemScale: 0.03,
			passes: {
				map: {
					type:'Basic',
					color: 0x4f4f4f,
					colorBG: 0x3f2f1f
				},
				// lightMap: {
				// 	intensity: 1.0
				// },
				// aoMap: {
				// 	intensity: 1.0
				// },
				emissiveMap: {
					type:'Basic',
					color: 0x000000,
					colorBG: 0x000000
				},
				// bumpMap: {},
				normalMap: {
					type: 'Normal',
					colorBG: 0x7f7fff,
					// opacity: 0.5
				},
				// displacementMap: {},
				roughnessMap: {
					type: 'Basic',
					color: 0xafafaf,
					colorBG: 0xffffff
				},
				metalnessMap: {
					type: 'Basic',
					color: 0x4f4f4f,
					colorBG: 0x000000
				},
				alphaMap: {
					type: 'Basic',
					color: 0xffffff,
					colorBG: 0x000000
				},
				// envMap: {
				// 	intensity: 1.0
				// },
			}
		},
		sand: {
			itemScale: 0.015,
			passes: {
				map: {
					type:'Basic',
					color: 0xafaf9f,
					colorBG: 0x9f9f7f
				},
				// lightMap: {
				// 	intensity: 1.0
				// },
				// aoMap: {
				// 	type:'Basic',
				// 	color: 0xffff00,
				// 	colorBG: 0xffff7f,
				// 	intensity: 1.0
				// },
				emissiveMap: {
					type:'Basic',
					color: 0x000000,
					colorBG: 0x000000
				},
				// bumpMap: {},
				normalMap: {
					type: 'Normal',
					colorBG: 0x7f7fff,
					// opacity: 0.5
				},
				// displacementMap: {},
				roughnessMap: {
					type: 'Basic',
					color: 0xafafaf,
					colorBG: 0xffffff
				},
				metalnessMap: {
					type: 'Basic',
					color: 0x4f4f4f,
					colorBG: 0x000000
				},
				alphaMap: {
					type: 'Basic',
					color: 0xffffff,
					colorBG: 0x000000
				},
				// envMap: {
				// 	intensity: 1.0
				// },
			}
		}
	};
	
	Object.keys(recipes).forEach(function(recipeKey) {
		var recipe = recipes[recipeKey];
		Object.keys(recipe.passes).forEach(function(passKey) {
			var pass = recipe.passes[passKey];
			pass.material = new THREE['Mesh'+pass.type+'Material']({
				color: pass.color,
				transparent: pass.opacity !== undefined,
				opacity: pass.opacity
			});
			if(!maps[passKey]) {
				maps[passKey] = new THREE.WebGLRenderTarget(256, 256);
			}
		});
	});

	var testSpheres = [];
	var tempMaterial = new THREE.MeshBasicMaterial();
	for (var i = 0; i < 200; i++) {
		var testSphere = new TestSphere({
			material: tempMaterial
		});
		scene.add(testSphere);
		testSphere.scale.set(0.1, 0.1, 0.1);
		testSphere.position.set(
			Math.random(),
			Math.random(),
			0
		);
		testSpheres.push(testSphere);
	}

	var bgPlane = new THREE.Mesh(
		new THREE.PlaneGeometry(1, 1, 1, 1),
		new THREE.MeshBasicMaterial({
			color: 0xff0000
		})
	);
	bgPlane.position.set(0.5, 0.5, -0.9999);
	scene.add(bgPlane);

	this.recipes = recipes;
	this.bgPlane = bgPlane;
	this.maps = maps;
	this.testSpheres = testSpheres;
	this.scene = scene;
	this.camera = camera;
	this.renderer = renderer;
	this.dirty = true;
}

function update() {
	if(!this.dirty) return;
	this.dirty = false;
	var recipes = this.recipes;
	var _this = this;
	var rows = 2;
	var cols = 2;
	this.renderer.autoClear = false;
	Object.keys(recipes).forEach(function(recipeKey, i) {
		var recipe = recipes[recipeKey];
		var row = i % cols;
		var col = ~~(i / cols);
		Object.keys(recipe.passes).forEach(function(passKey) {
			var pass = recipe.passes[passKey];
			for (var iSphere = 0; iSphere < _this.testSpheres.length; iSphere++) {
				var sphere = _this.testSpheres[iSphere];
				var s = recipe.itemScale || 0.1;
				sphere.scale.set(s, s, s);
				sphere.material = pass.material;
			}
			_this.bgPlane.material.color.set(pass.colorBG);
			_this.maps[passKey].scissor.set(128 * col, 128 * row, 128, 128);
			_this.maps[passKey].viewport.set(128 * col, 128 * row, 128, 128);
			_this.renderer.render(_this.scene, _this.camera, _this.maps[passKey]);
		});
	});
	_this.renderer.setClearColor(0x000000);
	this.renderer.autoClear = true;
}

DynamicTextureManager.prototype = {
	update: update
}

module.exports = DynamicTextureManager;